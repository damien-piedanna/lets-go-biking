//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoutingWithBikes.WebProxyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/WebProxyService")]
    [System.SerializableAttribute()]
    public partial class Position : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float latitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float longitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float latitude {
            get {
                return this.latitudeField;
            }
            set {
                if ((this.latitudeField.Equals(value) != true)) {
                    this.latitudeField = value;
                    this.RaisePropertyChanged("latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float longitude {
            get {
                return this.longitudeField;
            }
            set {
                if ((this.longitudeField.Equals(value) != true)) {
                    this.longitudeField = value;
                    this.RaisePropertyChanged("longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebProxyService.IJCDecauxService")]
    public interface IJCDecauxService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxService/GetNearestStationStartCoordinates", ReplyAction="http://tempuri.org/IJCDecauxService/GetNearestStationStartCoordinatesResponse")]
        RoutingWithBikes.WebProxyService.Position GetNearestStationStartCoordinates(RoutingWithBikes.WebProxyService.Position position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxService/GetNearestStationStartCoordinates", ReplyAction="http://tempuri.org/IJCDecauxService/GetNearestStationStartCoordinatesResponse")]
        System.Threading.Tasks.Task<RoutingWithBikes.WebProxyService.Position> GetNearestStationStartCoordinatesAsync(RoutingWithBikes.WebProxyService.Position position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxService/GetNearestStationEndCoordinates", ReplyAction="http://tempuri.org/IJCDecauxService/GetNearestStationEndCoordinatesResponse")]
        RoutingWithBikes.WebProxyService.Position GetNearestStationEndCoordinates(RoutingWithBikes.WebProxyService.Position position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxService/GetNearestStationEndCoordinates", ReplyAction="http://tempuri.org/IJCDecauxService/GetNearestStationEndCoordinatesResponse")]
        System.Threading.Tasks.Task<RoutingWithBikes.WebProxyService.Position> GetNearestStationEndCoordinatesAsync(RoutingWithBikes.WebProxyService.Position position);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJCDecauxServiceChannel : RoutingWithBikes.WebProxyService.IJCDecauxService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JCDecauxServiceClient : System.ServiceModel.ClientBase<RoutingWithBikes.WebProxyService.IJCDecauxService>, RoutingWithBikes.WebProxyService.IJCDecauxService {
        
        public JCDecauxServiceClient() {
        }
        
        public JCDecauxServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JCDecauxServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JCDecauxServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JCDecauxServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RoutingWithBikes.WebProxyService.Position GetNearestStationStartCoordinates(RoutingWithBikes.WebProxyService.Position position) {
            return base.Channel.GetNearestStationStartCoordinates(position);
        }
        
        public System.Threading.Tasks.Task<RoutingWithBikes.WebProxyService.Position> GetNearestStationStartCoordinatesAsync(RoutingWithBikes.WebProxyService.Position position) {
            return base.Channel.GetNearestStationStartCoordinatesAsync(position);
        }
        
        public RoutingWithBikes.WebProxyService.Position GetNearestStationEndCoordinates(RoutingWithBikes.WebProxyService.Position position) {
            return base.Channel.GetNearestStationEndCoordinates(position);
        }
        
        public System.Threading.Tasks.Task<RoutingWithBikes.WebProxyService.Position> GetNearestStationEndCoordinatesAsync(RoutingWithBikes.WebProxyService.Position position) {
            return base.Channel.GetNearestStationEndCoordinatesAsync(position);
        }
    }
}
